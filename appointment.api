import pyodbc
from flask import Flask, request, jsonify


connection = pyodbc.connect(
    "Driver={ODBC Driver 17 for SQL Server};"
    "Server=VIVOBOOK\\SQLEXPRESS;"
    "Database=Appointments;"
    "Trusted_Connection=yes;"
)
cursor = connection.cursor()
print("SQL is connected", cursor)
app = Flask(__name__)

@app.route('/Appointment', methods=["GET"])
def list_appointments():
    cursor.execute("SELECT * FROM Appointment")
    rows = cursor.fetchall()
    appointments = []
    for row in rows:
        appointment = {
            "ID": row.ID,
            "User_ID": row.User_ID,
            "date": row.date,
            "time": row.time,
            "description": row.description
        }
        appointments.append(appointment)
    return jsonify(appointments)

@app.route('/Appointment', methods=["POST"])
def adding_appointment_info():
    data = request.get_json()

    cursor.execute("SELECT * FROM UserID WHERE User_ID = ?", data["User_ID"])
    user = cursor.fetchone()
    if user is None:
        return jsonify({"error": "Invalid User_ID"}), 400

    
    

    try:
        cursor.execute("INSERT INTO Appointment (User_ID, date, time, description) VALUES (?, ?, ?, ?)", 
                       data["User_ID"], data["date"], data["time"], data["description"])
        connection.commit()
    except pyodbc.IntegrityError as e:
        return jsonify({"error": str(e)}), 400

    return jsonify(data), 201

@app.route('/Appointment/<int:ID>', methods=["PUT"]) 
def update_appointment(ID): 
    if request.method == "PUT": 
        data = request.get_json() 
        cursor.execute(""" UPDATE Appointment SET User_ID = ?, date = ?, time = ?, description = ? WHERE ID = ? """, 
                       (data["User_ID"], data["date"], data["time"], data["description"], ID))
        connection.commit() 
        return jsonify({"message": "Appointment is updated"}), 200
    

    
@app.route('/Appointment/<int:ID>', methods=["DELETE"])
def delete_appointment(ID):
    if request.method == "DELETE":
        cursor.execute("DELETE FROM Appointment WHERE ID = ?", (ID,))
        connection.commit()
        return jsonify({"message": "Appointment is deleted from list"}), 200

  

    

if __name__ == '__main__':
    app.run(debug=True)
